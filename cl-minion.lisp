(in-package :cl-minion)
(defparameter *s* nil)

(defun parse (json)
  (setf *s* (make-string-input-stream json))
  (val))

(defun val ()
  (case (peek-char t *s* nil nil)
    (#\{  `(:object  ,(obj)))
    (#\[  `(:array   ,(arr)))
    (#\"  `(:string  ,(str)))
    (#\t  `(:true    ,(lit "true"  t)))
    (#\f  `(:false   ,(lit "false" nil)))
    (#\n  `(:null    ,(lit "null"  nil)))
    (t    nil)))

(defun arr ()
  (append (w/o-wp (match #\[))
          (val)
          (collect* #'val #\,)
          (w/o-wp (match #\]))))

(defun obj ()
  (append (w/o-wp (match #\{))
          (w/o-wp (tups))
          (w/o-wp (match #\}))))

(defun tups ()
  (append (list (tup))
          (collect* #'tup #\,)))

(defun tup ()
  (append (w/o-wp (key))
          (w/o-wp (match #\:))
          (w/o-wp (val))))

(defun key ()
  (match #\")
  (list :key (loop for char = (read-char *s* nil)
                   while (char/= char #\")
                   collect char)))

(defun str () (second (key)))

(defun lit (string value)
  (loop for e in (coerce string 'list)
        for n = (read-char *s* nil)
        :unless (char= e n) :do (error "Unrecognized keyword!")
        :finally (return value)))
